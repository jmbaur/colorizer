--- Canvas.js	2020-04-08 14:41:59.000000000 -0700
+++ components/Canvas/Canvas.js	2020-04-08 14:40:56.000000000 -0700
@@ -72,6 +72,11 @@
     );
   };
 
+  const clearCanvas = () => {
+    const { ctx, canvas } = getCanvas();
+    ctx.clearRect(0, 0, canvas.width, canvas.height);
+  };
+
   // draw lines from other users
   React.useEffect(() => {
     if (!data) return;
@@ -85,17 +90,23 @@
       data.color,
       data.thickness
     );
-  }, [props, data]);
+  }, [props, data, getCanvas]);
 
   // clear the canvas
   React.useEffect(() => {
     if (!props.clear) return;
+    // clearCanvas();
     const { ctx, canvas } = getCanvas();
-    ctx.clearRect(0, 0, canvas.width + 1, canvas.height + 1);
-    // localStorage.clear();
+    ctx.clearRect(0, 0, canvas.width, canvas.height);
     props.clearCanvas(false);
   }, [props]);
 
+  // undo the last drawn line
+  React.useEffect(() => {
+    if (!props.undo) return;
+    console.log("undo hit");
+  }, [props]);
+
   // download the canvas to png
   React.useEffect(() => {
     if (!props.download) return;
@@ -106,11 +117,16 @@
     a.download = "art.png";
     a.click();
     props.handleDownload(false);
-  }, [props]);
+  }, [props, getCanvas]);
 
   // draw previous lines in room
   React.useEffect(() => {
     if (!props.prevLines.length) return;
+
+    // clearCanvas(); // clear canvas before drawing
+    // const { ctx, canvas } = getCanvas();
+    // ctx.clearRect(0, 0, canvas.width, canvas.height);
+
     const { ctx } = getCanvas();
     for (let i = 0; i < props.prevLines.length; i++) {
       for (let j = 0; j < props.prevLines[i].points.length - 1; j++) {
@@ -132,7 +148,9 @@
         );
       }
     }
-  }, [props]);
+
+    props.setPrevLines([]);
+  }, [props, getCanvas]);
 
   return (
     <canvas
